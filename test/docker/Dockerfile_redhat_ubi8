FROM registry.access.redhat.com/ubi8/ubi:8.10

# Install build dependencies
RUN dnf -y update && \
	dnf -y install --setopt=tsflags=nodocs \
	bash \
	gcc-toolset-14-gcc \
	gcc-toolset-14-gcc-c++ \
	clang \
	curl \
	gdb \
	tar \
	gzip \	
	xz \
	openssl-devel \
	zlib-devel \
	git \
	make \
	ncurses-devel \
	perl \
	fontconfig \
	nano \
	glibc-langpack-en && \
	localedef -i en_US -f UTF-8 en_US.UTF-8 || true && \
	echo "set linenumbers" >> /etc/nanorc &&\
	dnf clean all &&\
	rm -rf /var/cache/dnf /tmp/* /root/.cache

ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# --- Install ShellCheck ---
RUN curl -sSL https://github.com/koalaman/shellcheck/releases/download/v0.9.0/shellcheck-v0.9.0.linux.x86_64.tar.xz \
    | tar -xJ && \
    cp shellcheck-v0.9.0/shellcheck /usr/local/bin/ && \
    chmod +x /usr/local/bin/shellcheck && \
    rm -rf shellcheck-v0.9.0*

# --- Install CMake 3.27.2 ---
ENV CMAKE_VERSION=3.27.2
RUN mkdir -p /opt/cmake && \
    curl -LO https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh && \
    chmod +x cmake-${CMAKE_VERSION}-linux-x86_64.sh && \
    ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --skip-license --prefix=/opt/cmake && \
    ln -s /opt/cmake/bin/* /usr/local/bin/ && \
    rm cmake-${CMAKE_VERSION}-linux-x86_64.sh && \
    cmake --version

COPY . /app
WORKDIR /app

RUN chmod +x \
	src/zsh/zsh_uninstall.sh src/zsh/zsh_install.sh \
	src/golang/go_install.sh src/golang/go_uninstall.sh \
	src/bash/omb_install.sh src/bash/omb_uninstall.sh

# The bashrc autogenerated file contains the following 2 lines:
#     # If not running interactively, don't do anything
#     [ -z "$PS1" ] && return
# This means that if the shell is not interactive, it will not run the script. This breaks the source ~/.bashrc command.
# We can use the -i (interactive) option to force the shell to be interactive (this is not -it (interactive docker session) as it is not a TTY).
#     The -i option will force the shell to source the .bashrc file and it sets the PS1 variable.
#     However, this will produce a warning messages:
#         bash: cannot set terminal process group (-1): Inappropriate ioctl for device
#         bash: no job control in this shell
#     This is not a problem, as we are not using job control in this script. Just deal with it.
# To simulate the real user environment, we will use the -l (login) option to force the shell to be a login shell.
#     This will source the profiile file

CMD ["bash", "-l", "-i", "./main.sh"]
